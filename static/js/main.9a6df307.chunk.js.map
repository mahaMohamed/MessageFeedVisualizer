{"version":3,"sources":["logo.svg","MapContainer.js","MessageFilter.js","App.js","reportWebVitals.js","index.js"],"names":["mapStyles","width","height","MapContainer","props","onMarkerClick","marker","e","setState","selectedPlace","activeMarker","showingInfoWindow","onClose","state","console","log","locations","this","map","item","index","position","onClick","name","messages","google","zoom","style","initialCenter","lat","lng","visible","Component","GoogleApiWrapper","apiKey","MessageFilter","data","sentiments","request","XMLHttpRequest","open","responseType","send","onload","messageFeed","response","parseFeed","messagesText","feed","entry","content","$t","messagesContent","element","split","messagesSentiment","places","Geocode","setApiKey","setLanguage","locationArray","setTimeout","fromAddress","then","results","geometry","location","error","length","React","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9a6df307.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","\r\nimport React, { Component } from 'react';\r\nimport { Map, GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\r\nimport MessageFilter from \"./MessageFilter\"\r\n\r\n\r\n\r\nconst mapStyles = {\r\n  width: '100%',\r\n  height: '85%',\r\n};\r\n\r\nexport class MapContainer extends Component {\r\n\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      showingInfoWindow: false,\r\n      activeMarker: {},\r\n      selectedPlace: {}\r\n\r\n    };\r\n\r\n    console.log(\"In Map\", this.props.locations)\r\n\r\n  }\r\n\r\n  onMarkerClick = (props, marker, e) => {\r\n    this.setState({\r\n      selectedPlace: props,\r\n      activeMarker: marker,\r\n      showingInfoWindow: true\r\n    });\r\n  }\r\n\r\n\r\n  onClose = props => {\r\n    if (this.state.showingInfoWindow) {\r\n      this.setState({\r\n        showingInfoWindow: false,\r\n        activeMarker: null\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n  putMarkers() {\r\n    let markers = this.props.locations.map((item, index) =>\r\n\r\n      <Marker position={item} onClick={this.onMarkerClick}\r\n        name={this.props.messages[index]} />\r\n\r\n    )\r\n\r\n    return markers\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n\r\n    return (\r\n      <Map\r\n        google={this.props.google}\r\n        zoom={3}\r\n        style={mapStyles}\r\n        initialCenter={\r\n          {\r\n            lat: 39.074207,\r\n            lng: 21.824312\r\n          }\r\n        }\r\n      >\r\n\r\n        {/* {this.props.locations.map((mark, index) => <Marker key={index} position={mark.location} name={this.props.messages[index]} />)} */}\r\n\r\n\r\n        {\r\n           this.props.locations.map((item,index) => \r\n             \r\n              <Marker position={item} onClick={this.onMarkerClick}\r\n               name={this.props.messages[index]}/>\r\n            \r\n          )\r\n      }\r\n\r\n        <InfoWindow\r\n          marker={this.state.activeMarker}\r\n          visible={this.state.showingInfoWindow}\r\n          onClose={this.onClose}\r\n        >\r\n          <div>\r\n            <h4>{this.state.selectedPlace.name}</h4>\r\n          </div>\r\n\r\n      \r\n        </InfoWindow>\r\n      </Map>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: 'AIzaSyC_bahykCyBnj90GS2KQ2uYfT4q2Cef3p8'\r\n})(MapContainer);\r\n","import React from \"react\"\r\nimport './App.css';\r\nimport MapContainer from \"./MapContainer\"\r\nimport Geocode from \"react-geocode\";\r\n\r\n\r\n\r\n\r\n\r\nclass MessageFilter extends React.Component {\r\n\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      data: [],\r\n      messages: [],\r\n      sentiments: [],\r\n      locations: []\r\n\r\n    }\r\n  }\r\n\r\n\r\n\r\n  \r\n\r\n  componentWillMount() {\r\n\r\n    /*Retrieving feed data*/\r\n    let requestURL = 'https://spreadsheets.google.com/feeds/list/0Ai2EnLApq68edEVRNU0xdW9QX1BqQXhHRl9sWDNfQXc/od6/public/basic?alt=json';\r\n    let request = new XMLHttpRequest();\r\n    request.open('GET', requestURL);\r\n    request.responseType = 'json';\r\n    request.send();\r\n\r\n    request.onload = function () {\r\n      const messageFeed = request.response;\r\n      parseFeed(messageFeed);\r\n\r\n    }\r\n\r\n    /*Parsing the feed and saving it into the state*/\r\n    let parseFeed = messageFeed => {\r\n      let feedArray = messageFeed.feed.entry\r\n      let messagesText = feedArray.map(feed => feed.content.$t)\r\n      console.log(messageFeed)\r\n\r\n      let messagesContent = messagesText.map(element => element.split(\":\")[2].split(\", sentiment\")[0])\r\n\r\n      let messagesSentiment = messagesText.map(element => element.split(\":\")[3])\r\n\r\n      let places = [\"Damascus\", \"Mogadishu\", \"Ibiza\", \"Egypt\", \"Cairo\", \"Nairobi\", \"Kathmandu\", \"Bernabau\", \"Athens\",\r\n        \"Istanbul\"]\r\n\r\n\r\n\r\n      Geocode.setApiKey(\"AIzaSyC_bahykCyBnj90GS2KQ2uYfT4q2Cef3p8\");\r\n      Geocode.setLanguage(\"en\");\r\n      let locationArray = [];\r\n\r\n      setTimeout(()=>{ places.map((item, index) => {\r\n        Geocode.fromAddress(item).then(\r\n          response => {\r\n            const { lat, lng } = response.results[0].geometry.location;\r\n            let loc = { lat, lng };\r\n            return loc\r\n          },\r\n          error => {\r\n            console.error(error);\r\n          },\r\n        ).then(response => {\r\n          locationArray[index] = response\r\n          return response\r\n        })\r\n      })\r\n\r\n      console.log(locationArray)\r\n\r\n      Geocode.fromAddress(\"Eiffel Tower\").then(\r\n        response => {\r\n          const { lat, lng } = response.results[0].geometry.location;\r\n        },\r\n        error => {\r\n          console.error(error);\r\n        }\r\n      );\r\n\r\n}, 1500)\r\n\r\n\r\n      setTimeout(()=>{\r\n        this.setState({\r\n          data: messagesText,\r\n          messages: messagesContent,\r\n          sentiments: messagesSentiment,\r\n          locations: locationArray})\r\n  \r\n\r\n      },2000)\r\n\r\n\r\n\r\n      // // this.setState({\r\n      // //   data: messagesText,\r\n      // //   messages: messagesContent,\r\n      // //   sentiments: messagesSentiment,\r\n      // //   // locations: locationArray\r\n      // //   locations: [\r\n      // //     {\r\n      // //       name: \"Damascus\",\r\n      // //       location: {\r\n      // //         lat: 33.513805,\r\n      // //         lng: 36.276527\r\n      // //       },\r\n      // //     },\r\n      // //     {\r\n      // //       name: \"Mogadishu\",\r\n      // //       location: {\r\n      // //         lat: 2.046934,\r\n      // //         lng: 45.318161\r\n      // //       },\r\n      // //     },\r\n      // //     {\r\n      // //       name: \"Ibiza\",\r\n      // //       location: {\r\n      // //         lat: 38.906986,\r\n      // //         lng: 1.421416\r\n      // //       }\r\n      // //     },\r\n      // //     {\r\n      // //       name: \"Egypt\",\r\n      // //       location: {\r\n      // //         lat: 26.820553,\r\n      // //         lng: 30.802498\r\n      // //       },\r\n      // //     },\r\n      // //     {\r\n      // //       name: \"Cairo\",\r\n      // //       location: {\r\n      // //         lat: 30.044420,\r\n      // //         lng: 31.235712\r\n      // //       },\r\n      // //     },\r\n      // //     {\r\n      // //       name: \"Nairobi\",\r\n      // //       location: {\r\n      // //         lat: -1.292066,\r\n      // //         lng: 36.821945\r\n      // //       },\r\n      // //     }, {\r\n      // //       name: \"Kathmandu\",\r\n      // //       location: {\r\n      // //         lat: 27.717245,\r\n      // //         lng: 85.323959\r\n      // //       },\r\n      // //     },\r\n      // //     {\r\n      // //       name: \"Bernabau\",\r\n      // //       location: {\r\n      // //         lat: 52.680860,\r\n      // //         lng: 13.583550\r\n      // //       },\r\n      // //     },\r\n      // //     {\r\n      // //       name: \"Athens\",\r\n      // //       location: {\r\n      // //         lat: 37.983810,\r\n      // //         lng: 23.727539\r\n      // //       },\r\n      // //     },\r\n      // //     {\r\n      // //       name: \"Istanbul\",\r\n      // //       location: {\r\n      // //         lat: 41.008240,\r\n      // //         lng: 36.276527\r\n      // //       },\r\n      // //     },\r\n      // //   ]\r\n\r\n      // })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  render() {\r\n    console.log(\"IN Mesasage Render\", this.state.locations)\r\n\r\n    if (this.state.locations.length > 0) \r\n     return (<MapContainer locations={this.state.locations} messages={this.state.messages} />)\r\n      else{\r\n        return (<p> Loading</p>)\r\n\r\n      }\r\n\r\n\r\n    // return (\r\n    //   <div>\r\n\r\n    //     {/* <h1 className=\"App\">\r\n    //         {this.state.messages.map(element => {\r\n    //             return (<p> {element} </p>)\r\n    //         })\r\n\r\n    //         }\r\n    //     </h1> */}\r\n\r\n    //      <MapContainer locations={this.state.locations} messages={this.state.messages} />\r\n    //   </div>\r\n    // )\r\n  }\r\n\r\n}\r\nexport default MessageFilter;\r\n","import logo from './logo.svg';\nimport MessageFilter from \"./MessageFilter.js\"\nimport MapContainer from \"./MapContainer.js\"\nimport React from \"react\"\nimport './App.css';\nimport GoogleMapReact from 'google-map-react';\nimport withScriptjs from 'google-map-react';\nimport withGoogleMap from 'google-map-react';\n\n\n\n\n\n\nfunction App() {\n\n\n  return (\n    <div>\n\n\n    <h1> Message Feed </h1>\n\n    <MessageFilter/>\n    {/* <MapContainer/> */}\n\n    {/* <div style={{color: \"black\", width: \"100%\", height:\"100%\"}}> Hwllo  </div> */}\n\n    </div>\n    \n    \n    )\n\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}